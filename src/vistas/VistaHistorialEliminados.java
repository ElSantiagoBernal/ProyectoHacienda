/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controladores.ControladorUsuario;
import controladores.HistorialEliminado;
import javax.swing.table.DefaultTableModel;
import modeloAnimales.ArgumentoEliminacion;
import modeloAnimales.Caballo;
import modeloAnimales.Cerdo;
import modeloAnimales.Ganado;
import modeloPersonas.CriadorCerdo;
import modeloPersonas.EncargadoCaballo;
import modeloPersonas.EncargadoGanado;
import modeloPersonas.Usuario;

/**
 *
 * @author SANTIAGO
 */
public class VistaHistorialEliminados extends javax.swing.JFrame {

    /**
     * Creates new form VistaHistorialEliminados
     */
//    DefaultTableModel
    VistaLogIn vistaLogIn;
    ControladorUsuario controladorUsuario;
    DefaultTableModel modeloAnimalesEliminados;
    HistorialEliminado historialEliminado;

    public VistaHistorialEliminados(VistaLogIn vistaLogIn) {
        initComponents();
        setLocationRelativeTo(this);
        this.vistaLogIn = vistaLogIn;
        controladorUsuario = vistaLogIn.getControladorUsuario();
        historialEliminado = vistaLogIn.getHistorialEliminado();
        declararColumnasTabla();
        cargarTabla();
        validarAnimal();
    }

    private void validarAnimal() {
        Usuario usuario = controladorUsuario.getUsuarioLogueado();
        if (usuario instanceof EncargadoCaballo || VistaAdministrador.rolEscogido.equals("Caballo")) {
            textoAnimal.setText("Caballos");
        } else if (usuario instanceof CriadorCerdo || VistaAdministrador.rolEscogido.equals("Cerdo")) {
            textoAnimal.setText("Cerdos");
        } else if (usuario instanceof EncargadoGanado || VistaAdministrador.rolEscogido.equals("Ganado")) {
            textoAnimal.setText("Ganado");
        }
    }

    private void declararColumnasTabla() {
        modeloAnimalesEliminados = new DefaultTableModel();
        modeloAnimalesEliminados.addColumn("C칩digo");
        modeloAnimalesEliminados.addColumn("Genero");
        modeloAnimalesEliminados.addColumn("Argumento");
        this.tblHistorial.setModel(modeloAnimalesEliminados);
    }

    private void cargarTabla() {
        Usuario usuario = controladorUsuario.getUsuarioLogueado();
        if (usuario instanceof CriadorCerdo) {
            cargarTablaCerdoEliminado();
        } else if (usuario instanceof EncargadoCaballo) {
            cargarTablaCaballoEliminado();
        } else {
            cargarTablaGanadoEliminado();
        }
    }

    private void cargarTablaGanadoEliminado() {
        for (int i = 0; i < historialEliminado.obtenerTama침oLista(); i++) {
            ArgumentoEliminacion argumentoEliminacion = historialEliminado.recorrerLista(i);
            if (argumentoEliminacion.getAnimal() instanceof Ganado) {
                String[] datos = new String[3];
                datos[0] = argumentoEliminacion.getAnimal().getCodigoString();
                datos[1] = argumentoEliminacion.getAnimal().getGenero();
                datos[2] = argumentoEliminacion.getArgumento();
                modeloAnimalesEliminados.addRow(datos);
            }
        }
    }

    private void cargarTablaCaballoEliminado() {
        for (int i = 0; i < historialEliminado.obtenerTama침oLista(); i++) {
            ArgumentoEliminacion argumentoEliminacion = historialEliminado.recorrerLista(i);
            if (argumentoEliminacion.getAnimal() instanceof Caballo) {
                String[] datos = new String[3];
                datos[0] = argumentoEliminacion.getAnimal().getCodigoString();
                datos[1] = argumentoEliminacion.getAnimal().getGenero();
                datos[2] = argumentoEliminacion.getArgumento();
                modeloAnimalesEliminados.addRow(datos);
            }
        }
    }

    private void cargarTablaCerdoEliminado() {
        for (int i = 0; i < historialEliminado.obtenerTama침oLista(); i++) {
            ArgumentoEliminacion argumentoEliminacion = historialEliminado.recorrerLista(i);
            if (argumentoEliminacion.getAnimal() instanceof Cerdo) {
                String[] datos = new String[3];
                datos[0] = argumentoEliminacion.getAnimal().getCodigoString();
                datos[1] = argumentoEliminacion.getAnimal().getGenero();
                datos[2] = argumentoEliminacion.getArgumento();
                modeloAnimalesEliminados.addRow(datos);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistorial = new javax.swing.JTable();
        textoAnimal = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eliminados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        tblHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblHistorial);

        textoAnimal.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addComponent(textoAnimal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoAnimal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolver)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVolver)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        Usuario usuario = controladorUsuario.getUsuarioLogueado();
        if (usuario instanceof CriadorCerdo) {
            VistaCriadorDeCerdo vista = new VistaCriadorDeCerdo(vistaLogIn);
            vista.setVisible(true);
        } else if (usuario instanceof EncargadoCaballo) {
            VistaEncargadoDelCaballo vista = new VistaEncargadoDelCaballo(vistaLogIn);
            vista.setVisible(true);
        } else {
            VistaEncargadoDelGanado vista = new VistaEncargadoDelGanado(vistaLogIn);
            vista.setVisible(true);
        }
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVolver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHistorial;
    private javax.swing.JLabel textoAnimal;
    // End of variables declaration//GEN-END:variables
}
